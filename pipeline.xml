<?xml version="1.0" encoding="UTF-8"?>

<pipeline xmlns="http://www.sing-group.org/compi/pipeline-1.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<version>0.0.1</version>

	<params>
		<param name="dataDir" shortName="dd" global="true">The directory containing the fastq files. </param>
		<param name="ctdOut" shortName="ctdo" global="true" defaultValue="/1_cutadapt">The relative path to the directory containing the cutadapt results.</param>
		<param name="bwtOut" shortName="bwto" global="true" defaultValue="/2_bowtie">The relative path to the directory containing the bowtie results.</param>
		<param name="ftqOut" shortName="ftqo" global="true" defaultValue="/3_feature-counts">The relative path to the directory containing the featureCounts results.</param>
		<param name="dsqOut" shortName="dsqo" global="true" defaultValue="/4_deseq2">The relative path to the directory containing the DESeq2 results.</param>
		<param name="RDeseq" shortName="rdes" global="true" defaultValue="run_deseq2.R">The relative path to the directory containing the R script to run the DESeq2 analysis.</param>
		
		<param name="adapter" shortName="adp">The sequence of the adapter to remove. </param>
		<param name="outDir" shortName="o" global="true">The directory to put the adapter-removed files. </param>
		
		<param name="bwtIndex" shortName="bwti">The directory path containing the Bowtie index. </param>
		
		<param name="gffFile" shortName="gff">The path to the .gff file of the reference genome</param>
		
		<param name="conditions" shortName="cond">The path to the .tsv file with the file names of the samples, conditions and labels.</param>
	</params>

<!--TASKS-->
	<tasks>
		
		<!--Creates the output directories-->
		<task id="initialization">
			<![CDATA[
			#Cutadapt folder
			if [ ! -d "${outDir}${ctdOut}" ]; then
				echo "Creating the directory for the Cutadapt results"
				mkdir -p ${outDir}${ctdOut}/
			else
				echo "${ctdOut} already exist"; echo "Removing ${outDir}/${ctdOut} directory and files..."
				rm -Rf ${outDir}${ctdOut}/
				echo "Creating the directory for the Cutadapt results"
				mkdir -p ${outDir}${ctdOut}/
			fi
			
			#<!--Bowtie folder-->
			if [ ! -d "${outDir}${bwtOut}" ]; then
				echo "Creating the directory for the Bowtie results"
				mkdir -p ${outDir}${bwtOut}/
			else
				echo "${bwtOut} already exist"; echo "Removing ${outDir}${bwtOut} directory and files..."
				rm -Rf ${outDir}${bwtOut}/
				echo "Creating the directory for the Bowtie results"
				mkdir -p ${outDir}${bwtOut}/
			fi
			
			#<!--FeatureCounts folder-->
			if [ ! -d "${outDir}${ftqOut}" ]; then
				echo "Creating the directory for the FeatureCounts results"
				mkdir -p ${outDir}${ftqOut}/
			else
				echo "${ftqOut} already exist"; echo "Removing ${outDir}${ftqOut} directory and files..."
				rm -Rf ${outDir}${ftqOut}/
				echo "Creating the directory for the FeatureCounts results"
				mkdir -p ${outDir}${ftqOut}/
			fi
			
			#<!--DESeq2 folder-->
			if [ ! -d "${outDir}${dsqOut}" ]; then
				echo "Creating the directory for the DESeq2 results"
				mkdir -p ${outDir}${dsqOut}/
			else
				echo "${dsqOut} already exist"; echo "Removing ${outDir}${dsqOut} directory and files..."
				rm -Rf ${outDir}${dsqOut}/
				echo "Creating an empty directory for DESeq2 results"
				mkdir -p ${outDir}${dsqOut}/
			fi
			]]>
		</task>

		<!--Adapter removal with cutadapt-->
		<foreach id="cut-sequences" after="initialization" of="command" in="ls -1 ${dataDir} | grep .*\.fastq" as="file" params="adapter">
			echo "Removing the adapter with Cutadapt"
			cutadapt \
				-m 1 \
				-a ${adapter} \
				-o ${outDir}${ctdOut}/trimmed_${file} \
				${dataDir}/${file}
		</foreach>

		<!--Alignment with Bowtie-->
		<foreach id="bowtie-alignment" after="cut-sequences" of="command" in="ls -1 ${outDir}${ctdOut}/ | grep .*\.fastq" as="file" params="bwtIndex">
			<![CDATA[
			echo "Performing the alignment"
			#bw_index="${ls -1 ${bwtIndex}| head -n1 | sed 's/\..\.ebwt//' | sed 's@\(.*\)@${bwtIndex}\/\1/@'}"
			#bw_index=ls -1 ${btwIndex}| head -n1 | sed 's/\..\.ebwt//' | sed 's/\(.*\)/${btwIndex}\/\1/'
			
			bw_fastq="${outDir}${ctdOut}/${file}"
			bw_fastq=$(echo $bw_fastq | tr -s '/')  #convert the path to single slash
			
			bw_output="${outDir}${bwtOut}/${file}.sam"
			bw_output=$(echo $bw_output | tr -s '/')  #convert the path to single slash
			
			bowtie -S \
				$(ls -1 ${bwtIndex}| head -n1 | sed 's/\..\.ebwt//' | sed 's@\(.*\)@'${bwtIndex}'\/\1@') \
				${bw_fastq} \
				${bw_output} 2>bowtie_${file}.log
			]]>
			
		</foreach>

		<!--Converts the sam files to bam format-->
		<foreach id="sam-to-bam" after="bowtie-alignment" of="command" in="ls -1 ${outDir}${bwtOut}/ | grep .*\.fastq.sam" as="file">
			bam_output="${outDir}${bwtOut}/"
			bam_output="$(echo $bam_output | tr -s '/')" <!--convert the path to single slash-->
			
			filebam=$(echo ${file} | sed 's/\.sam//')
			filebam=$(echo $filebam | tr -s '/')  <!--convert the path to single slash-->
			
			samtools sort "${bam_output}${file}" > "${bam_output}${filebam}.bam"
			samtools index "${bam_output}${filebam}.bam"
			
		</foreach>

		<!--Performs the quantification with featureCounts-->
		<task id="feature-counts" after="sam-to-bam" params="gffFile">
			bam_input="${outDir}${bwtOut}/"
			bam_input=$(echo $bam_input | tr -s '/') <!--convert the path to single slash-->
			
			path_output="${outDir}${ftqOut}/"
			path_output=$(echo $path_output | tr -s '/') <!--convert the path to single slash-->
			
			<!--Se podría pasar también un parámetro que permita elegir el tipo de atributo del archivo gff.-->
			featureCounts -a ${gffFile} -o "${path_output}/all-counts.txt" "${bam_input}"*".bam"
		</task>

		<!--Performs the differential expression analysis with DESeq2-->
		<task id="deseq" after="feature-counts" params="conditions">
			<![CDATA[
			export path_output="${outDir}${dsqOut}" #beware of this path, important for DESeq2 results
			#Converts the "conditions" file to absolute paths
			echo "Adding full paths to the condition file"
			
			export dqCond=$(echo ${conditions} | rev | cut -d / -f 1 | rev | sed 's/.*/deseq_&/') #name of the new conditions file
			dqCond=$(echo $dqCond | tr -s '/') #convert the path to single slash
			
			cat "${conditions}" | sed 's+trimmed_*+'"${outDir}${bwtOut}/"'&+' | tr -s '/' > "${path_output}/${dqCond}"
			
			Rscript run_deseq2.R
			#Rscript run_deseq2.R
			 ]]>
		</task>

	</tasks>

</pipeline>
