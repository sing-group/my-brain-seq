<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an example file of a compi pipeline -->
<pipeline xmlns="http://www.sing-group.org/compi/pipeline-1.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<version>0.0.1</version>

	<!--
		Params section (<params>): this section contains parameter declarations
		of the pipeline. It is important that you give a description since it 
		will be shown in the help.
	-->
	<params>
		<param name="dataDir" shortName="dd" global="true">The directory containing the fastq files. </param>
		<param name="adapter" shortName="adp">The sequence of the adapter to remove. </param>
		<param name="outDir" shortName="o" global="true">The directory to put the adapter-removed files. </param>
		
		<param name="bwtIndex" shortName="bwti">The directory containing the Bowtie index. </param>
	</params>

	<!--
		Tasks section (<tasks>): this section contains all the steps of your pipeline.
		There are two types of taks:
		- regular "tasks" (<task>) which is a simple task with a piece of runnable
		code inside.
		- loops (<foreach>) which is a task which launches several subtask in parallel
	-->
	<tasks>
		<!--
			A task (<task>). A task contains the following attributes:
			- id: a name for the task, which must be unique. This id will be displayed
			in the help of the pipeline, so it is important that you give it a
			significative name for the end user.
			- after: a comma-separated list of task ids that this task depends on.
			In a regular execution of the pipeline, this task will never start
			before all dependencies finish. However, if you run the the pipeline with
			the -s (skip to task) or the -st (single task) options, that will ignore
			those dependencies and start the pipeline from this task.
			- fileLog: a file to redirect the standard output.
			- fileErrorLog: a file to redirect the standar error.

			Inside the <task> you place the code of your task (it is interpreted
			by the Bourne shell (sh)). You can use your parameters by placing
			${parameter_name} anywhere in your code.
		-->
		<task id="initialization">
			mkdir -p ${outDir}/cutadapt_results/
		</task>

		
		<foreach id="cutSequences" after="initialization" of="command" in="ls -1 ${dataDir} | grep .*\.fastq" as="file" params="adapter">
			echo "Removing the adapter with Cutadapt"
			cutadapt \
				-m 1 \
				-a ${adapter} \
				-o ${outDir}/cutadapt_results/trimmed_${file} \
				${dataDir}/${file}
		</foreach>
	
		
		<task id="bowtieFolder" after="cutSequences">
			if [ ! -d "${outDir}/bowtie_results" ]; then
				echo "Creating the directory for the Bowtie results"
				mkdir -p ${outDir}/bowtie_results/
			else
				echo "bowtieFolder already exist"
			fi
		</task>
		
		
		<foreach id="bowtieAlignment" after="bowtieFolder" of="command" in="ls -1 ${outDir}/cutadapt_results/ | grep .*\.fastq" as="file" params="bwtIndex">
			echo "Performing the alignment"
			<!--bw_index="${ls -1 ${bwtIndex}| head -n1 | sed 's/\..\.ebwt//' | sed 's@\(.*\)@${bwtIndex}\/\1/@'}" -->
			<!-- bw_index=ls -1 ${btwIndex}| head -n1 | sed 's/\..\.ebwt//' | sed 's/\(.*\)/${btwIndex}\/\1/' -->
			bw_fastq="${outDir}/cutadapt_results/${file}"
			bw_output="${outDir}/bowtie_results/${file}.sam"
			
			<![CDATA[
			bowtie -S \
				$(ls -1 ${bwtIndex}| head -n1 | sed 's/\..\.ebwt//' | sed 's@\(.*\)@'${bwtIndex}'\/\1@') \
				${bw_fastq} \
				${bw_output}
			]]>
			
		</foreach>
		
		
		<task id="mirDeep2Folder" after="bowtieAlignment">
			if [ ! -d "${outDir}/miRDeep2_results" ]; then
				echo "Creating the directory for the miRDeep2 results"
				mkdir -p ${outDir}/miRDeep2_results/
			else
				echo "miRDeep2_results folder already exist"
			fi
		</task>
		
		
	</tasks>
	<!--
		The metadata section is optional and allows to define additional information about
		the pipeline tasks.
	<metadata>
		<task-description id="task-1">Task 1 description.</task-description>
		<task-description id="task-2">Task 2 description.</task-description>
	</metadata>
	-->
</pipeline>
