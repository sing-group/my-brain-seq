<?xml version="1.0" encoding="UTF-8"?>

<pipeline xmlns="http://www.sing-group.org/compi/pipeline-1.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<version>0.0.1</version>

	<params>
		<param name="hostWorkingDir" shortName="hw" global="true">Path of the working directory in the host.</param>
		<param name="workingDir" shortName="wd" global="true" defaultValue="/working_dir">The working directory of the project. </param>
		<param name="dataDir" shortName="dd" global="true" defaultValue="input/fastq">The directory containing the fastq files (relative to workingDir).</param>
		<param name="outDir" shortName="o" global="true" defaultValue="output">The directory containing the pipeline outputs (relative to workingDir).</param>
		<param name="bwtIndex" shortName="bwti">The directory path containing the Bowtie index (relative to workingDir).</param>
		<param name="genome" shortName="gnm" defaultValue="">The directory path to the genome to align (relative to workingDir).</param>
		<param name="gffFile" shortName="gff">The path to the .gff file of the reference genome (relative to workingDir).</param>
		
		<param name="fqcOut" shortName="fqco" global="true" defaultValue="1_fastqc">The relative path to the directory containing the FastQC results.</param>
		<param name="ctdOut" shortName="ctdo" global="true" defaultValue="2_cutadapt">The relative path to the directory containing the cutadapt results.</param>
		<param name="bwtOut" shortName="bwto" global="true" defaultValue="3_bowtie">The relative path to the directory containing the bowtie results.</param>
		<param name="qmOut" shortName="qmo" global="true" defaultValue="4_qualy_map">The relative path to the directory containing the QualyMap results.</param>
		<param name="ftqOut" shortName="ftqo" global="true" defaultValue="5_feature_counts">The relative path to the directory containing the featureCounts results.</param>
		<param name="dsqOut" shortName="dsqo" global="true" defaultValue="6_deseq2">The relative path to the directory containing the DESeq2 results.</param>

		<param name="newIndOut" shortName="nio" defaultValue="new_index">The path where the new bowtie index will be saved (relative to workingDir).</param>
		<param name="scriptsDir" shortName="sd" global="true" defaultValue="/scripts/">The relative path to the directory containing the R script to run the DESeq2 analysis.</param>
		<param name="deSeq2Rscript" shortName="rdes" global="true" defaultValue="run_deseq2.R">The relative path to the directory containing the R script to run the DESeq2 analysis.</param>
		<param name="adapter" shortName="adp">The sequence of the adapter to remove.</param>
		<param name="conditions" shortName="cond">The path to the .tsv file with the rootnames of the samples, conditions and labels.</param>
		<param name="contrast" shortName="cont">The path to the .tsv file with the contrast DESeq2 has to perform.</param>
		
		<flag name="skipPullDockerImages" shortName="sdi">Use this flag to skip the pull-docker-images task.</flag>
		<param name="rDeseq2Version" shortName="rdv" defaultValue="1.32.0" global="true">Version of the pegi3s/r_deseq2 Docker image to use.</param>
		<param name="cutadaptVersion" shortName="cdv" defaultValue="1.16" global="true">Version of the pegi3s/cutadapt Docker image to use.</param>
		<param name="fastqcVersion" shortName="fqcv" defaultValue="0.11.9" global="true">Version of the pegi3s/fastqc Docker image to use.</param>
		<param name="bowtieVersion" shortName="bwv" defaultValue="1.2.3" global="true">Version of the pegi3s/bowtie1 Docker image to use.</param>
		<param name="featureCountsVersion" shortName="fqv" defaultValue="2.0.0" global="true">Version of the pegi3s/feature-counts Docker image to use.</param>
		<param name="samtoolsVersion" shortName="stv" defaultValue="1.9" global="true">Version of the pegi3s/samtools_bcftools Docker image to use.</param>
		<param name="qualimapVersion" shortName="qmv" defaultValue="2.2.1" global="true">Version of the pegi3s/qualimap Docker image to use.</param>
		
	</params>

	<tasks>
		<task id="pull-docker-images" params="skipPullDockerImages" if="[ -v ${skipPullDockerImages} ]">
			docker pull pegi3s/fastqc:${fastqcVersion}
			docker pull pegi3s/cutadapt:${cutadaptVersion}
			docker pull pegi3s/bowtie1:${bowtieVersion}
			docker pull pegi3s/samtools_bcftools:${samtoolsVersion}
			docker pull pegi3s/qualimap:${qualimapVersion}
			docker pull pegi3s/feature-counts:${featureCountsVersion}
			docker pull pegi3s/r_deseq2:${rDeseq2Version}
		</task>

		<!--Creates the output directories-->
		<task id="initialization" after="pull-docker-images">
		<![CDATA[
			#FastQC folder
			if [ ! -d "${workingDir}/${outDir}/${fqcOut}" ]; then
				echo "Creating the directory for the FastQC results"
				mkdir -p ${workingDir}/${outDir}/${fqcOut}/
			else
				echo "${fqcOut} already exist"; echo "Removing ${workingDir}/${outDir}/${fqcOut} directory and files..."
				rm -Rf ${workingDir}/${outDir}/${fqcOut}/
				echo "Creating the directory for the FastQC results"
				mkdir -p ${workingDir}/${outDir}/${fqcOut}/
			fi
			
			#Cutadapt folder
			if [ ! -d "${workingDir}/${outDir}/${ctdOut}" ]; then
				echo "Creating the directory for the Cutadapt results"
				mkdir -p ${workingDir}/${outDir}/${ctdOut}/
			else
				echo "${ctdOut} already exist"; echo "Removing ${workingDir}/${outDir}/${ctdOut} directory and files..."
				rm -Rf ${workingDir}/${outDir}/${ctdOut}/
				echo "Creating the directory for the Cutadapt results"
				mkdir -p ${workingDir}/${outDir}/${ctdOut}/
			fi
			
			#Bowtie folder
			if [ ! -d "${workingDir}/${outDir}/${bwtOut}" ]; then
				echo "Creating the directory for the Bowtie results"
				mkdir -p ${workingDir}/${outDir}/${bwtOut}/
			else
				echo "${bwtOut} already exist"; echo "Removing ${workingDir}/${outDir}/${bwtOut} directory and files..."
				rm -Rf ${workingDir}/${outDir}/${bwtOut}/
				echo "Creating the directory for the Bowtie results"
				mkdir -p ${workingDir}/${outDir}/${bwtOut}/
			fi
			
			#QualiMap folder
			if [ ! -d "${workingDir}/${outDir}/${qmOut}" ]; then
				echo "Creating the directory for the QualiMap results"
				mkdir -p ${workingDir}/${outDir}/${qmOut}/
			else
				echo "${qmOut} already exist"; echo "Removing ${workingDir}/${outDir}/${qmOut} directory and files..."
				rm -Rf ${workingDir}/${outDir}/${qmOut}/
				echo "Creating the directory for the QualyMap results"
				mkdir -p ${workingDir}/${outDir}/${qmOut}/
			fi
			
			#FeatureCounts folder
			if [ ! -d "${workingDir}/${outDir}/${ftqOut}" ]; then
				echo "Creating the directory for the FeatureCounts results"
				mkdir -p ${workingDir}/${outDir}/${ftqOut}/
			else
				echo "${ftqOut} already exist"; echo "Removing ${workingDir}/${outDir}/${ftqOut} directory and files..."
				rm -Rf ${workingDir}/${outDir}/${ftqOut}/
				echo "Creating the directory for the FeatureCounts results"
				mkdir -p ${workingDir}/${outDir}/${ftqOut}/
			fi
			
			#DESeq2 folder
			if [ ! -d "${workingDir}/${outDir}/${dsqOut}" ]; then
				echo "Creating the directory for the DESeq2 results"
				mkdir -p ${workingDir}/${outDir}/${dsqOut}/
			else
				echo "${dsqOut} already exist"; echo "Removing ${workingDir}/${outDir}/${dsqOut} directory and files..."
				rm -Rf ${workingDir}/${outDir}/${dsqOut}/
				echo "Creating an empty directory for DESeq2 results"
				mkdir -p ${workingDir}/${outDir}/${dsqOut}/
			fi

			rm -rf ${workingDir}/compi_scripts
			mkdir -p ${workingDir}/compi_scripts
			
			#Makes a copy of the scripts used in the analysis to working-dir
			cp ${scriptsDir}/${deSeq2Rscript} ${workingDir}/compi_scripts/${deSeq2Rscript}
		]]>
		</task>
		
		<!--Quality control with FastQC-->
		<foreach id="fastqc-qc" after="initialization" of="command" in="ls -1 ${workingDir}/${dataDir} | grep .*\.fastq" as="file">
		<![CDATA[
			fqc_input="/data/${dataDir}/${file}"
			fqc_output="/data/${outDir}/${fqcOut}/"
			
			docker run --rm \
				-v ${hostWorkingDir}:/data \
				pegi3s/fastqc:${fastqcVersion} \
				-o ${fqc_output} \
				${fqc_input}
		]]>
		</foreach>
		
		<!--Adapter removal with cutadapt-->
		<foreach id="cut-sequences" after="fastqc-qc" of="command" in="ls -1 ${workingDir}/${dataDir} | grep .*\.fastq" as="file" params="adapter">
			echo "Removing the adapter with Cutadapt: ${file}"
		<![CDATA[
			docker run --rm \
				-v ${hostWorkingDir}:/data \
				pegi3s/cutadapt:${cutadaptVersion} \
				-m 1 \
				-a ${adapter} \
				-o /data/${outDir}/${ctdOut}/trimmed_${file} \
				data/${dataDir}/${file}
		]]>
		</foreach>

		<!--Bowtie genome index build--> 
		<task id="build-genome-index" after="cut-sequences" params="bwtOut genome newIndOut" if="[ ! -z ${genome} ]"> #if user sets a value for genome, then this task is executed
		<![CDATA[
			echo "Genome parameter passed"
			echo "Building the genome index for Bowtie alignment"
			bgi_genome="/data/${genome}"
			
			#get the filename of genome without the file extension
			bgi_filename="$(echo ${bgi_genome} | rev  | cut -d \/ -f 1 | rev | cut -d . -f 1)"
			
			#makes the path to the directory using the genome filename as part of the directory name
			bgi_output="/data/${outDir}/${bwtOut}/${newIndOut}_${bgi_filename}"
			
			echo "  Path to genome file:           ${bgi_genome}"
			echo "  Output path for the index:     ${bgi_output}"
			echo "  Root name for the index files: ${bgi_filename}"
			
			#enviromental variable of the index to use in the next step
			export bgi_index_path="${bgi_output}/${bgi_filename}"
			
			echo "Running bowtie for the genome index creation, previous index of the same genome will be deleted"
			docker run --rm \
				-v ${hostWorkingDir}:/data \
				pegi3s/bowtie1:${bowtieVersion} \
				sh -c "rm -rf ${bgi_output}\
				&& mkdir ${bgi_output} \
				&& bowtie-build ${bgi_genome} ${bgi_index_path}"
		]]>
		</task>
		
		<!--Alignment with Bowtie-->
		<foreach id="bowtie-alignment" after="build-genome-index" of="command" in="ls -1 ${workingDir}/${outDir}/${ctdOut}/ | grep .*\.fastq" as="file" params="genome bwtOut bwtIndex newIndOut">
		<![CDATA[
			bw_fastq="/data/${outDir}/${ctdOut}/${file}"
			bw_fastq=$(echo $bw_fastq | tr -s '/')  #convert the path to single slash
			
			bw_output="data/${outDir}/${bwtOut}/${file}.sam"
			bw_output=$(echo $bw_output | tr -s '/')  #convert the path to single slash
			
			#if the genome parameter is passed in the arguments
			if [ ! -z ${genome} ]
			then
				bgi_genome="/data/${genome}"
				
				#get the filename of genome without the file extension
				bgi_filename="$(echo ${bgi_genome} | rev  | cut -d \/ -f 1 | rev | cut -d . -f 1)"
			
				#makes the path to the directory using the genome filename as part of the directory name
				bgi_output="/data/${outDir}/${bwtOut}/${newIndOut}_${bgi_filename}"
				
				bw_index="${bgi_output}/${bgi_filename}"
				echo "Index to align with: ${bw_index}"
				
			#otherwise
			else
				bw_index=$(ls -1 ${workingDir}/${bwtIndex} | head -n1 | sed 's/\..\.ebwt//' | sed 's@\(.*\)@'${workingDir}/${bwtIndex}'\/\1@') #gets the root of the index file name
				bw_index=$(echo $bw_index | tr -s '/')
				bw_index=$(echo $bw_index | cut -d / -f 3- | awk '{print "/data/" $0}')
				echo "Index to align with: ${bw_index}"
			fi
				
			#test if the file exist, if so removes it
			if [ -f "${bw_output}" ]; then
				echo "${file}.sam already exists, removing ${file}.sam."
				rm -f "${bw_output}"
			fi
			
			echo "Performing the alignment of ${file}.sam"
			
			docker run --rm \
				-v ${hostWorkingDir}:/data \
				pegi3s/bowtie1:${bowtieVersion} \
				bowtie -S \
				${bw_index} \
				${bw_fastq} \
				${bw_output}

		]]>
		</foreach>

		<!--Converts the sam files to bam format-->
		<foreach id="sam-to-bam" after="bowtie-alignment" of="command" in="ls -1 ${workingDir}/${outDir}/${bwtOut}/ | grep .*\.fastq.sam" as="file">
			bam_output="${workingDir}/${outDir}/${bwtOut}/"
			bam_output="$(echo $bam_output | tr -s '/')" <!--convert the path to single slash-->
			
			filebam=$(echo ${file} | sed 's/\.sam//')
			filebam=$(echo $filebam | tr -s '/')  <!--convert the path to single slash-->
			
			#test if the file exist, if so removes it
			if [ -f "${bam_output}/${filebam}.bam" ]; then
				echo "${filebam}.bam already exists, removing ${filebam}.bam and ${filebam}.bam.bai."
				rm -f "${bam_output}/${filebam}.bam*"
			fi
			
			#replaces $working_dir with /data/
			bam_output=$(echo $bam_output | cut -d / -f 3- | awk '{print "/data/" $0}')
			
			echo "Converting ${filebam}.sam to bam."
			docker run --rm \
				-v ${hostWorkingDir}:/data \
				pegi3s/samtools_bcftools:${samtoolsVersion} \
				sh -c "samtools sort "${bam_output}${file}" > "${bam_output}${filebam}.bam"" \
				sh -c "samtools index "${bam_output}${filebam}.bam""
				
		</foreach>

		<!--Performs the quality control with QualiMap-->
		<foreach id="quali-map" after="sam-to-bam" of="command" in="ls -1 ${workingDir}/${outDir}/${bwtOut}/ | grep .*\.fastq.bam" as="bamFile" params="gffFile">
		<![CDATA[	
			bam_input="/data/${outDir}/${bwtOut}/${bamFile}"
			annotations="/data/${gffFile}"
			qm_output="output/${qmOut}/${bamFile}"
			
			docker run --rm\
				-v ${hostWorkingDir}:/data \
				pegi3s/qualimap:${qualimapVersion} \
				sh -c "qualimap rnaseq -bam ${bam_input} -gtf ${annotations} -outdir ${qm_output} -outfile ${bamFile}.pdf --java-mem-size=4G"
		]]>
		</foreach>
		
		<!--Performs the quantification with featureCounts-->
		<task id="feature-counts" after="quali-map" params="gffFile">
			bam_input="/data/${outDir}/${bwtOut}/"
			bam_input=$(echo $bam_input | tr -s '/') <!--convert the path to single slash-->
			
			path_output="/data/${outDir}/${ftqOut}/"
			path_output=$(echo $path_output | tr -s '/') <!--convert the path to single slash-->
			
			<!--Se podría pasar también un parámetro que permita elegir el tipo de atributo del archivo gff.-->
			docker run --rm \
				-v ${hostWorkingDir}:/data \
				pegi3s/feature-counts:${featureCountsVersion} \
				sh -c "featureCounts -a /data/${gffFile} -o "${path_output}/all-counts.txt" "${bam_input}"*".bam""
				
		</task>

		<!--Performs the differential expression analysis with DESeq2-->
		<task id="deseq" after="feature-counts" params="conditions contrast deSeq2Rscript">
		<![CDATA[
			export path_output="${workingDir}/${outDir}/${dsqOut}"
			export path_output_docker="/data/${outDir}/${dsqOut}"
			export path_scriptR_docker="/data/${scriptsDir}/${deSeq2Rscript}"
			
			conversion_file="${path_output}/conversion_file.txt"

			# get the reference factor for the comparison (eg.: control)
			ref_factor=$(tail --lines=+2 ${workingDir}/${contrast} | sed 's/".*" = //' | sed 's/".*-//' | sed 's/"$//')
			
			# get the contrast name to build the output filename
			contrast_filename=$(tail ${workingDir}/${contrast} --lines=+2 | cut -d'=' -f1 | tr -d \")
			
			# creates an empty file and adds the header of conversion_file.
			head -n1 ${workingDir}/${conditions} > ${conversion_file}

			# converts the names of the conversion_file to a format recognized by the pipeline
			# (adds "trimmed_" at the beginning of the rootname and ".fastq.bam" at the end)
			echo "Converting condition_file format"
			tail --lines=+2 ${workingDir}/${conditions} | sed 's/^/trimmed_/' | sed 's/\t/.fastq.bam\t/' >> ${conversion_file}
			
			#Converts the "conditions" file to absolute paths
			echo "Adding full paths to the condition file"
			export dqCond="${path_output}/deseq_conditions_file.txt"
			export dqCond_docker="${path_output_docker}/deseq_conditions_file.txt"
			
				# Adds "/data/..." at the beginning of the row names
			cat "${conversion_file}" | sed 's+trimmed_*+'"/data/${outDir}/${bwtOut}/"'&+' | tr -s '/' > "${dqCond}"
			echo "Contrast to perform: ${contrast_filename}"
			echo "Running DESeq2 analysis"
			docker run --rm \
				-v ${hostWorkingDir}:/data \
				pegi3s/r_deseq2:${rDeseq2Version} \
					Rscript /data/compi_scripts/${deSeq2Rscript} /data/${outDir}/${ftqOut}/all-counts.txt ${dqCond_docker} ${ref_factor} ${path_output_docker} ${contrast_filename}
		]]>
		</task>
	</tasks>
</pipeline>
