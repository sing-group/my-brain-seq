<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an example file of a compi pipeline -->
<pipeline xmlns="http://www.sing-group.org/compi/pipeline-1.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<version>0.0.1</version>

	<!--
		Params section (<params>): this section contains parameter declarations
		of the pipeline. It is important that you give a description since it 
		will be shown in the help.
	-->
	<params>
		<param name="dataDir" shortName="dd" global="true">The directory containing the fastq files. </param>
		<param name="adapter" shortName="adp">The sequence of the adapter to remove. </param>
		<param name="outDir" shortName="o" global="true">The directory to put the adapter-removed files. </param>
		
		<param name="bwtIndex" shortName="bwti">The directory path containing the Bowtie index. </param>
		
		<param name="gff_file" shortName="gff">The path to the .gff file of the reference genome</param>
	</params>
	
	
	
	
	
	
	
<!--TASKS-->
	<tasks>
	
		<!--Creates the output directories-->
		<task id="initialization">
			<!--Cutadapt folder-->
			if [ ! -d "${outDir}/1_cutadapt" ]; then
				echo "Creating the directory for the cutadapt results"
				mkdir -p ${outDir}/1_cutadapt/
			else
				echo "1_cutadapt already exist"
			fi
			
			<!--Bowtie folder-->
			if [ ! -d "${outDir}/2_bowtie" ]; then
				echo "Creating the directory for the Bowtie results"
				mkdir -p ${outDir}/2_bowtie/
			else
				echo "bowtieFolder already exist"
			fi
			
			<!--FeatureCounts folder-->
			if [ ! -d "${outDir}/3_feature-counts" ]; then
				echo "Creating the directory for the miRDeep2 results"
				mkdir -p ${outDir}/3_feature-counts/
			else
				echo "3_feature-counts folder already exist"
			fi
		</task>

		
		
		
		<!--Adapter removal with cutadapt-->
		<foreach id="cut-sequences" after="initialization" of="command" in="ls -1 ${dataDir} | grep .*\.fastq" as="file" params="adapter">
			echo "Removing the adapter with Cutadapt"
			cutadapt \
				-m 1 \
				-a ${adapter} \
				-o ${outDir}/1_cutadapt/trimmed_${file} \
				${dataDir}/${file}
		</foreach>
	
		
		
		
		<!--Alignment with Bowtie-->
		<foreach id="bowtie-alignment" after="cut-sequences" of="command" in="ls -1 ${outDir}/1_cutadapt/ | grep .*\.fastq" as="file" params="bwtIndex">
			echo "Performing the alignment"
			<!--bw_index="${ls -1 ${bwtIndex}| head -n1 | sed 's/\..\.ebwt//' | sed 's@\(.*\)@${bwtIndex}\/\1/@'}" -->
			<!-- bw_index=ls -1 ${btwIndex}| head -n1 | sed 's/\..\.ebwt//' | sed 's/\(.*\)/${btwIndex}\/\1/' -->
			bw_fastq="${outDir}/1_cutadapt/${file}"
			bw_output="${outDir}/2_bowtie/${file}.sam"
			
			<![CDATA[
			bowtie -S \
				$(ls -1 ${bwtIndex}| head -n1 | sed 's/\..\.ebwt//' | sed 's@\(.*\)@'${bwtIndex}'\/\1@') \
				${bw_fastq} \
				${bw_output} 2>bowtie_${file}.log
			]]>
			
		</foreach>
		
		
		
		
		<!--Converts the sam files to bam format-->
		<foreach id="sam-to-bam" after="bowtie-alignment" of="command" in="ls -1 ${outDir}/2_bowtie/ | grep .*\.fastq.sam" as="file">
			bam_output="${outDir}/2_bowtie/"
			filebam=$(echo ${file} | sed 's/\.sam//')
			samtools sort "${bam_output}/${file}" > "${bam_output}/${filebam}.bam"
			samtools index "${bam_output}/${filebam}.bam"
			
		</foreach>
			
		
		<foreach
			id="feature-counts-R"
			after="sam-to-bam"
			of="command"
			in="ls -1 ${outDir}/2_bowtie/ | grep .*\.fastq\.bam"
			as="file"
			params="gff_file">
			bam_input="${outDir}/2_bowtie/${file}"
			path_output="${outDir}/3_feature-counts/"
			
			featureCounts -a ${gff_file} -o "${path_output}/${file}_counts.txt" "${bam_input}"

		</foreach>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	</tasks>
	<!--
		The metadata section is optional and allows to define additional information about
		the pipeline tasks.
	<metadata>
		<task-description id="task-1">Task 1 description.</task-description>
		<task-description id="task-2">Task 2 description.</task-description>
	</metadata>
	-->
</pipeline>
